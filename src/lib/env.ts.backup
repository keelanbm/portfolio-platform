// Centralized environment configuration with validation

function getRequiredEnvVar(name: string, serverOnly: boolean = false): string {
  const value = process.env[name]
  if (!value) {
    // Only log errors on server side to avoid client-side errors
    if (typeof window === 'undefined') {
      console.error(`‚ùå Missing required environment variable: ${name}`)
      console.error(`Please check your .env.local file and ensure ${name} is set`)
    }
    
    // For server-only variables, throw error only on server
    if (serverOnly && typeof window !== 'undefined') {
      return '' // Return empty string on client for server-only vars
    }
    
    // Return a fallback for development to prevent crashes
    if (name === 'DATABASE_URL') {
      return 'postgresql://postgres.epfgirkjjycugnpsvoag:L9sPBW3WraFicBUKeWCc@aws-0-us-east-1.pooler.supabase.com:6543/postgres'
    }
    
    // For critical client-side variables, provide better error messaging
    if (name === 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY') {
      console.error(`üîë Clerk publishable key is missing or invalid. Please check your Clerk dashboard for the correct key.`)
      // Return a placeholder in development to prevent complete crash
      if (process.env.NODE_ENV === 'development') {
        return 'pk_test_placeholder'
      }
    }
    
    throw new Error(`Missing required environment variable: ${name}`)
  }
  return value
}

function getOptionalEnvVar(name: string, defaultValue: string = ''): string {
  return process.env[name] || defaultValue
}

// Server-side environment variables (only available on server)
export const serverEnv = {
  // Database
  DATABASE_URL: getRequiredEnvVar('DATABASE_URL', true),
  DIRECT_URL: getOptionalEnvVar('DIRECT_URL', process.env.DATABASE_URL || ''),
  
  // Authentication
  CLERK_SECRET_KEY: getRequiredEnvVar('CLERK_SECRET_KEY', true),
  CLERK_WEBHOOK_SECRET: getRequiredEnvVar('CLERK_WEBHOOK_SECRET', true),
  
  // Supabase
  SUPABASE_SERVICE_ROLE_KEY: getRequiredEnvVar('SUPABASE_SERVICE_ROLE_KEY', true),
} as const

// Client-safe environment variables (available on both client and server)
export const env = {
  // Public authentication
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: getRequiredEnvVar('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY'),
  
  // Public Supabase
  NEXT_PUBLIC_SUPABASE_URL: getRequiredEnvVar('NEXT_PUBLIC_SUPABASE_URL'),
  
  // Feature flags
  ENABLE_NOTIFICATIONS: getOptionalEnvVar('NEXT_PUBLIC_ENABLE_NOTIFICATIONS', 'true') === 'true',
  
  // Environment
  NODE_ENV: getOptionalEnvVar('NODE_ENV', 'development'),
  NEXT_PUBLIC_APP_URL: getOptionalEnvVar('NEXT_PUBLIC_APP_URL', 'http://localhost:3000'),
} as const

// Health check for environment configuration
export function validateEnvironment(): { valid: boolean; errors: string[] } {
  const errors: string[] = []
  
  // Check database URL format (server-side only)
  if (typeof window === 'undefined' && serverEnv.DATABASE_URL && !serverEnv.DATABASE_URL.startsWith('postgresql://')) {
    errors.push('DATABASE_URL must be a valid PostgreSQL connection string')
  }
  
  // Check Clerk configuration (server-side only)
  if (typeof window === 'undefined' && serverEnv.CLERK_SECRET_KEY && !serverEnv.CLERK_SECRET_KEY.startsWith('sk_')) {
    errors.push('CLERK_SECRET_KEY must start with sk_')
  }
  
  // Check public Clerk key (client-safe)
  if (env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY && !env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY.startsWith('pk_')) {
    errors.push('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY must start with pk_')
  }
  
  return {
    valid: errors.length === 0,
    errors
  }
}

// Startup environment validation (server-side only)
function performStartupValidation() {
  // Only run validation on server side
  if (typeof window !== 'undefined') {
    return
  }
  
  const validation = validateEnvironment()
  
  if (!validation.valid) {
    console.error('‚ùå Critical environment configuration errors detected:')
    validation.errors.forEach(error => console.error(`  - ${error}`))
    console.error('\nüîß Please check your .env.local file and ensure all required variables are set correctly.')
    
    if (env.NODE_ENV === 'production') {
      console.error('‚ö†Ô∏è  Server cannot start in production with invalid configuration!')
      process.exit(1)
    } else {
      console.error('‚ö†Ô∏è  Continuing in development mode with fallback values, but errors may occur.')
    }
  } else {
    console.log('‚úÖ Environment configuration validated successfully')
  }
}

// Run validation on import (server-side only)
performStartupValidation()