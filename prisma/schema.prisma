// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  username         String           @unique
  displayName      String?
  bio              String?
  avatarUrl        String?
  websiteUrl       String?
  location         String?
  walletAddress    String?          @unique
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  projects      Project[]
  collections   Collection[]
  likes         Like[]
  saves         Save[]
  followers     Follow[]       @relation("UserFollowers")
  following     Follow[]       @relation("UserFollowing")
  nftMints      NftMint[]
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Project {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String?
  coverImageUrl   String
  slideCount      Int      @default(0)
  tags            String[]
  questions       String[] // Creator's questions seeking feedback
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  isPublic        Boolean  @default(true)
  ipfsHash        String?
  contractAddress String?
  tokenId         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  slides            ProjectSlide[]
  likes             Like[]
  saves             Save[]
  nftMints          NftMint[]
  comments          Comment[]
  collectionProjects CollectionProject[]

  @@map("projects")
}

model ProjectSlide {
  id         String   @id @default(cuid())
  projectId  String
  imageUrl   String
  slideOrder Int
  createdAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_slides")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  commentId String?
  voteType  VoteType @default(LIKE) // LIKE, UPVOTE, DOWNVOTE
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@unique([userId, commentId])
  @@map("likes")
}

enum VoteType {
  LIKE
  UPVOTE
  DOWNVOTE
}

model Save {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("saves")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Tag {
  id         String   @id @default(cuid())
  name       String   @unique
  usageCount Int      @default(0)
  isFeatured Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  // Tags can be used for projects and comments via string arrays

  @@map("tags")
}

model NftMint {
  id              String   @id @default(cuid())
  projectId       String
  minterWallet    String
  transactionHash String
  mintPrice       Decimal?
  createdAt       DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [minterWallet], references: [walletAddress], onDelete: Cascade)

  @@map("nft_mints")
}

enum SubscriptionTier {
  FREE
  PRO
}

// Comment System Models

model Comment {
  id        String      @id @default(cuid())
  content   String
  userId    String
  projectId String      // Always required - all content tied to projects
  parentId  String?     // For replies (self-referencing)
  tags      String[]    // Simple array for tool tags
  type      CommentType @default(COMMENT) // COMMENT, QUESTION, ANSWER
  status    String?     // For questions: OPEN, ANSWERED, CLOSED
  isAccepted Boolean    @default(false) // For answers: marked as best answer
  viewCount Int         @default(0) // For questions: track views
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  likes   Like[]    // Reuse existing like system for upvotes/downvotes

  @@map("comments")
}

enum CommentType {
  COMMENT
  QUESTION
  ANSWER
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(true)
  coverImageUrl String?
  projectCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionProjects CollectionProject[]

  @@unique([userId, name]) // User can't have duplicate collection names
  @@map("collections")
}

model CollectionProject {
  id           String     @id @default(cuid())
  collectionId String
  projectId    String
  addedAt      DateTime   @default(now())

  // Relations
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([collectionId, projectId]) // Project can't be in same collection twice
  @@map("collection_projects")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // COMMENT_REPLY, PROJECT_LIKE, NEW_FOLLOWER, etc.
  title     String
  message   String
  actionUrl String?  // URL to navigate when notification is clicked
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
